// <auto-generated />
using System;
using Ecommerce.Infrastructure.Presistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Movies.Infrastructure.Migrations
{
    [DbContext(typeof(DBContextApplication))]
    [Migration("20241023192517_seMIG")]
    partial class seMIG
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movies.Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tsundere"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tsundere"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yandere"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kuudere"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dandere"
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsLiked = true,
                            ReviewId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsLiked = false,
                            ReviewId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsFree = false,
                            Name = "Tsundere Movie 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsFree = false,
                            Name = "Tsundere Movie 2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            IsFree = false,
                            Name = "Yandere Movie"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            IsFree = false,
                            Name = "Kuudere Movie"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            IsFree = false,
                            Name = "Dandere Movie"
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Great movie!",
                            Date = new DateTime(2024, 10, 23, 22, 25, 15, 541, DateTimeKind.Local).AddTicks(6955),
                            MovieId = 1,
                            Rate = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Not bad",
                            Date = new DateTime(2024, 10, 23, 22, 25, 15, 541, DateTimeKind.Local).AddTicks(7004),
                            MovieId = 2,
                            Rate = 0,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.RolePermissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.RoleUser", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 0,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Age = 0,
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("Movies.Domain.Entity.Like", b =>
                {
                    b.HasOne("Movies.Domain.Entity.Reviews", "Reviews")
                        .WithMany("Likes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Movie", b =>
                {
                    b.HasOne("Movies.Domain.Entity.Category", "category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Reviews", b =>
                {
                    b.HasOne("Movies.Domain.Entity.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movies.Domain.Entity.RolePermissions", b =>
                {
                    b.HasOne("Movies.Domain.Entity.Permissions", "Permissions")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Movies.Domain.Entity.RoleUser", b =>
                {
                    b.HasOne("Movies.Domain.Entity.Role", "Role")
                        .WithMany("RoleUser")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entity.User", "User")
                        .WithMany("RoleUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Movie", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Permissions", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Reviews", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Movies.Domain.Entity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("RoleUser");
                });

            modelBuilder.Entity("Movies.Domain.Entity.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("RoleUser");
                });
#pragma warning restore 612, 618
        }
    }
}
